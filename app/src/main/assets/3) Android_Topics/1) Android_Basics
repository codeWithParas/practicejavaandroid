
Check this link atleast once in a month

GOOGLE IO LINK : https://events.google.com/io/

***************************************************************************************


A .1) Life Cycles.

a) Activity are maintained in activity stack memory.

b) lifecycle

A > onCreate
A > onStart   ( <--- onRestart() )
A > onResume
A > onPostResume

 > Use up a load of memory (A could even use up too much and crash)
 > Launch activity B

A > onPause
B > onCreate
B > onStart
B > onResume
A > onStop
B > Use up a load of memory


When the available memory goes down, the framework will stop and remove activities and services which are not
associated with the current task. If your app eats up even more memory, the framework will stop your activities which
are in the background. Then comes the services associated with your app and the last one to finish off will be the current activity.

c) when finish() called from onCreate().

  A...onCreate method........main..
  A...onStart method.........main..
  A...onResume method........main..
  A...onPostResume method....main..
  (Switching to B activity)
  A..onPause method..........main..
  B..2..onCreate method......(finish called from here)
  A....onResume method........main..
  A....onPostResume method....main..
  B..2..onDestroy method......(onDestroy of 2 activity is called directly)

d) when finish is from onClick()

<<<<<<<<<<<<<<<<<2..onFinish method called >>>>>>>>>>>>>>>>>>>
 .2..onPause method......
 ...onResStart method....main..
 ...onStart method....main..
 ...onResume method....main..
 ...onPostResume method....main..
 .2..onStop method......
 .2..onDestroy method......

D) if activity is already in the stack then onRestart() is called.

  ...onCreate method....main..
  ...onStart method....main..    (  <---- onRestart() called here)
  ...onResume method....main..
  ...onPostResume method....main..
  ...onPause method....main..
  .2..onCreate method......
  .2..onStart method......
  .2..onResume method......
  .2..onPostResume method......
  ...onStop method....main..
  (back button is pressed)--------call onRestart of first activity

http://www.techobytes.app.com/launch?username=test&password=test


Note :
    @Override
    protected void onCreate(Bundle savedInstanceState)   //saved bundle data on configuration change
    {
        super.onCreate(savedInstanceState);             // provide base frame screen for other layouts
        setContentView(R.layout.activity_main);

    }




A.2) Intent :  Explicit and Implicit

ex : Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://www.akquinet.com/"));
     startActivity(intent);

Refer : https://blog.akquinet.de/2010/04/15/android-activites-and-tasks-series-intent-flags/

a) Intent is a "passive-data-structure" (operation executed and handled by OS level using some extrnal threads).
b) Operation primarily consist of "data" and "action".
c) This "action" can be userdefined or predefined (like : "ACTION_VIEW").
d) An intent is always handled by an Android component, namely an activity, a service or a broadcast receiver.
e) Intent Flags : intent.addFlag(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);

Refer : https://blog.akquinet.de/2010/04/15/android-activites-and-tasks-series-intent-flags/

...REORDER_TO_FRONT **
...CLEAR TOP  **
...CLEAR TASK **
...NEW TASK
...SINGLE TOP
...MULTIPLE TASK

Explicit Intent: When your application is aware of which component to call to perform some action
Implicit Intent: When your application is not aware of which component can exactly perform your desired action.
For Ex, If you simply say that you want to display a URL, the system decides what component will fulfill the intention.


A.2) Pending Intent : (refer w.r.t Notification Builder Example)

A PendingIntent specifies an action to take in the future. It lets you pass a future Intent to another application and allow
that application to execute that Intent as if it had the same permissions as your application, whether or not your application
is still around when the Intent is eventually invoked.It is a token that you give to a foreign application which allows the
foreign application to use your applicationâ€™s permissions to execute a predefined piece of code.

Other way :

So what's a pending intent?
It's a token that your app process will give to the location process, and the location process will use it to wake up your app
when an event of interest happens. So this basically means that your app in the background doesn't have to be always running.
When something of interest happens, we will wake you up. This saves a lot of battery.


->It is used to do future task behalf from other application.
->It wraps the intent (that has bussiness logic) and fire that intent after some time elapsed or at the time of foriegn app event
 occur.





A.3) Activity Launched Modes :

In Manifest :

<activity
    android:name=".SingleTaskActivity"
    android:label="singleTask launchMode"
    android:launchMode="singleTask">

Refer: https://blog.akquinet.de/2011/02/25/android-activities-and-tasks-series-%E2%80%93-activity%C2%A0attributes/

Refer : https://inthecheesefactory.com/blog/understand-android-activity-launchmode/en

The intent flags (defined on the calling intent) in conjunction with the launch mode (specified on the called activity) define the actual outcome of the launch.
There are four different launch modes: standard, singleTop, singleTask and singleInstance.

a) standard : A new instance of the activity is created and pushed on top of the current task. The created instance will receive the intent. This is the default and most commonly used behavior.

b) single top : If activity is on top of Stack don't create new instance.



c) single task :
Note :
1)The same instance will be used again.
2)Remove toaap level activities that are already present in stack.

Before : Task 1 : A -> B(singleTask) -> C -> D -> (if B is called again then)       ---> onNewIntent() method will be invoked in B.
After  : Task 2 : A -> B (C & D popped up from stack)

******As according to official documentation : for singleTask :
1) The system creates new task and instantiate the activity at the root of new task.
2) And if an instance of the activity already exists in a separate task, the system routes the intent to the existing instance
   through a call to its onNewIntent() method, rather than creating a new instance.
3) Only one instance of the activity can exist at a time.


But here above we have shown example on same task. Pblm ? So , e.i now it comes to topic.....
...taskAffinity of Activity ?
...Ans : What is the preference of the activity e.i for which task it want to be associated. Is called taskAffinity of Activity.
...By default all activities in an application is having same affinity.
...Affinity value : is nothing but a default package name that we have given to our app is nothing but a affinity area.

So now,
What if we want to change Affinity of Activity B which has a launch mode "SingleTask" ?
Ans : For that we need to assign diiferent value to affinity in manifest of singleTask Activity B
(android:taskAffinity="com.some.new.task") , e.i

   <application...
   .
   .
    <activity android:name=".android_launchmodes.Activity_B"
                android:launchMode="singleTask"
                android:taskAffinity="com.some.new.task"/>
    .
    .
    </application>

So now we need to understand singleTask in two ways : (1) with taskAffinity (2) without taskAffinity ?

With taskAffinity the working remain the same as in without taskAffinity. The difference only created is that it will create a new task in case of taskAffinity.
 So the condition below holds true :

Before : Task 1 : A -> B(singleTask) -> C -> D -> (if B is called again then)
After  : Task 2 (or 2 if taskAffinity is given) : A -> B (C & D popped up from stack)



d) single instance :

single instance is same like singleTask but the only difference is it will not allow other activity
 instances in the new task that was created for Activity B if activity B assigned as singleInstance including affinity then w.r.t this
 activity only new task will be created.
 But the popping operation goes same.

if taskAffinity is not given :

Before : Task 1 : A -> B( Task 2 assigned becouse B is singleInstance) -> C -> D -> (if B is called again from D then)
After  : Task 1 : A -> C -> D -> (if B is called again from D then)
After  : Task 2 : B (called from D, same instance of B will be used)
After  : Task 2 : B (if back button is pressed then open D then C then A)

or (if taskAffinity is given) :

Before : Task 1 : A -> B(singleInstance) -> (for B new task will be created)
Result : i.e ->
Before : Task 1 : A -> ____no B here___ -> (for B new task will be created)
After  : Task 2 : B -> C (if B calls C then C will be open in task 1)
Result : i.e ->
After  : Task 2 : B -> ____no C here___ -> (for C task 1 will be used)
After  : Task 1 : A -> C (if B calls C then C will be open in task 1 after A inside stack of task 1 only, not in task 2)

againAfter  : Task 1 : C -> B (if C calls B since B is in other task so it will reuse same instance of B)
Result : i.e ->
After  : Task 1 : A -> C  -> ( C will not popped out)
After  : Task 2 : B ( no new instance of B will be created again)


Difference between singleTask and singleInstance :

1) for singleTask activity new task will be created also other activities allowed in this task. All other activities will be created
in this task
2) for singleInstance activity new task will be created but no other activities allowed in this task. All other activities will be created
in default task.


1) for singleTask popping operation will be used if singleTask activity called again from other activity over it. All the top
activities above it will be removed from the stack.
2) for singleInstance no popping operation will be used .

***********************************************************************************************************




A.4) Intent-Filter : (Justify Incoming Type Event For The Component)

It set the state of android component so that its incoming event receiving can be modified in order to accept various categories of incoming event.
Incoming event here can be : receiving type of broadcast, receive url to view on browser, receive email.
3 things :
action name
category
data





^&*^&*^&**&^*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^^&*^&*^&*^&*^**^&*^&*^&*^&*^&*^&*&
^&*^&*^&**^*^&***^&*^&&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*




B.1 ) Fragments :

1)Fragments are reusable component of android (as in inheritance we have reusability concept).
2)Fragments are light weight.
3)Used in case to optimize app and make app light-weight.

Lifecycle Methods : total 11 method

onAttach
onCreate
onCeateView
onActivityCreated
onStart
onResume
..........
onPause
onStop
onViewDestroy
onDestroy
onDetach

Example :
                FragmentManager manager = getFragmentManager();
                FragmentTransaction tran = manager.beginTransaction();
                tran.add(R.id.lytMain, new Fragmenttwo(), new Fragmenttwo().getClass().getName());
                tran.addToBackStack(new Fragmenttwo().getClass().getName());
                tran.commit();




^&*^&*^&**&^*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^^&*^&*^&*^&*^**^&*^&*^&*^&*^&*^&*&
^&*^&*^&**^*^&***^&*^&&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*




C.1) Content Provider :

a)Component of android.
b)used to store data in Sqlilte.
c)recommended technique for interprocess communication.
d)by using getContentResolver() method we pass the perticular URI to insert data from.
e)used to provide data to outside app by returning cursor.

ex: accessing contacts, sms, calender.

Server Side : insert name

 (MyContentProvider-Custom CP)
 String PROVIDER_NAME = "zafar.contentproviderdemo.MyContentProvider";
 static final String URL = "content://" + PROVIDER_NAME + "/cte";

 ContentValues values = new ContentValues();
 values.put(MyContentProvider.name, ((EditText) findViewById(R.id.txtName)).getText().toString());
 Uri uri = getContentResolver().insert(MyContentProvider.CONTENT_URI, values);


Client Side :

cursorLoader = new CursorLoader(this, Uri.parse("content://zafar.contentproviderdemo.MyContentProvider/cte"), null, null, null, null);





^&*^&*^&**&^*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^^&*^&*^&*^&*^**^&*^&*^&*^&*^&*^&*&
^&*^&*^&**^*^&***^&*^&&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*




D.1) Services :

a)A Service is an application component that can perform long-running operations in the background, and it does not provide a user interface.
  Another application component can start a service, and it continues to run in the background even if the user switches to another application.
b)Additionally, a component can bind to a service to interact with it and even perform interprocess communication (IPC). (Refer : Aidl Example)

* Previously, on google doc. services where categories as start, bound, intent serves. But now due to major update in Oreo(API-8) which
  basically prioritize foreground components and related services to run first . The major optimization done here. So due to this services
  where categories as :-

Categories of Service:

a) Foreground : A foreground service performs some operation that is noticeable to the user. For example, an audio app would use a foreground
   service to play an audio track. Foreground services must display a status bar icon.An app is considered to be in the foreground if any of
   the following is true:
...It has a visible activity, whether the activity is started or paused.
...It has a foreground service.
...Another foreground app is connected to the app, either by binding to one of its services or by making use of one of its content providers.

If none of those conditions is true, the app is considered to be in the background.

...While an app is in the foreground, it can create and run both foreground and background services freely. When an app goes into the
   background, it has a window(whitelist) of several minutes in which it is still allowed to create and use services. At the end of that
   window, the app is considered to be idle. At this time, the system stops the app's background services, just as if the app had called
   the services' Service.stopSelf() methods.

Important Note : Bound services are not affected...These rules do not affect bound services in any way. If your app defines a bound service, other components
can bind to that service whether or not your app is in the foreground.

Under certain circumstances, a background app is placed on a temporary whitelist for several minutes. While an app is on the whitelist, it
can launch services without limitation, and its background services are permitted to run. An app is placed on the whitelist when it handles
a task that's visible to the user, such as:

..Handling a high-priority Firebase Cloud Messaging (FCM) message.
..Receiving a broadcast, such as an SMS/MMS message.
..Executing a PendingIntent from a notification.
..Starting a VpnService before the VPN app promotes itself to the foreground.

So now bckground services at this point depends on Job Sheduler.

So Buddy,....Prior to Android 8.0, the usual way to create a foreground service was to create a background service, then promote that
                service to the foreground.
.Important : ............With Android 8.0, there is a complication; the system doesn't allow a background app to create a background service.
.............For this reason, Android 8.0 introduces the new method startForegroundService() to start a new service in the foreground.

...... For this reason, Android 8.0 introduces the new method startForegroundService() to start a new service in the foreground. After the
system has created the service, the app has five seconds to call the service's startForeground() method to show the new service's
user-visible notification. If the app does not call startForeground() within the time limit, the system stops the service and
declares the app to be ANR.

...IntentService is subject to these restrictions
IntentService is a service, and is therefore subject to the new restrictions on background services. As a result, many apps that rely on
IntentService do not work properly when targeting Android 8.0 or higher. For this reason, Android Support Library 26.0.0 introduces a new
JobIntentService class, which provides the same functionality as IntentService but uses jobs instead of services when running on Android 8.0
or higher.


b) Background : A background service performs an operation that isn't directly noticed by the user.
After Api 26 >= some instruction were imposed.

c) Bound :
A service is bound when an application component binds to it by calling bindService(). A bound service offers a client-server interface
that allows components to interact with the service, send requests, receive results, and even do so across processes with
interprocess communication (IPC). A bound service runs only as long as another application component is bound to it.
Multiple components can bind to the service at once, but when all of them unbind, the service is destroyed.

***Broadcasts that require a signature permission are exempted from this restriction, since these broadcasts are only sent
to apps that are signed with the same certificate, not to all the apps on the device.



Types of Service :

Service
This is the base class for all services. When you extend this class, it's important to create a new thread in which the service can complete
all of its work; the service uses your application's main thread by default, which can slow the performance of any activity that your
application is running.

IntentService
This is a subclass of Service that uses a worker thread to handle all of the start requests, one at a time. This is the best option if you
don't require that your service handle multiple requests simultaneously. Implement onHandleIntent(), which receives the intent for each
start request so that you can complete the background work.



^&*^&*^&**&^*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^^&*^&*^&*^&*^**^&*^&*^&*^&*^&*^&*&
^&*^&*^&**^*^&***^&*^&&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*



E.1) BroadCast :


1) Android Apps send and receive broadcast from android system.
2) Basically it makes use of Publish-Sucsriber design pattern.
3) For example, the Android system sends broadcasts when various system events occur, such as when
   the system boots up or the device starts charging.
4) Apps can send their custom broadcast also.

Generally speaking, broadcasts can be used as a messaging system across apps and outside of the normal user flow.
However, you must be careful not to abuse the opportunity to respond to broadcasts and run jobs in the background
that can contribute to a slow system performance.


E.2) How to Receive and Send BroadCast Receiver ?
Ans :  Refer : https://developer.android.com/guide/components/broadcasts.html

a) System BroadCast :

A broadcast is a message that any app can receive. The system delivers various broadcasts for system events, such as when the
system boots up or the device starts charging. You can deliver a broadcast to other apps by passing an Intent to
sendBroadcast() or sendOrderedBroadcast().

Android 7.0 and higher no longer sends the following system broadcasts. This optimization affects all apps, not only those
targeting Android 7.0.
ACTION_NEW_PICTURE
ACTION_NEW_VIDEO

Apps targeting Android 7.0 (API level 24) and higher must register the following broadcasts with
registerReceiver(BroadcastReceiver, IntentFilter). Declaring a receiver in the manifest does not work.

b) Local BroadCast: Custom BroadCast



E.2.1)Receiving broadcasts :

Apps can receive broadcasts in two ways: through manifest-declared receivers and context-registered receivers
Manifest-declared receivers
If you declare a broadcast receiver in your manifest, the system launches your app (if the app is not already running)
when the broadcast is sent.

Note: If your app targets API level 26 or higher, you cannot use the manifest to declare a receiver for implicit broadcasts
(broadcasts that do not target your app specifically), except for a few implicit broadcasts that are exempted from that restriction.
In most cases, you can use scheduled jobs instead.
To declare a broadcast receiver in the manifest, perform the following steps:

Specify the <receiver> element in your app's manifest.

<receiver android:name=".MyBroadcastReceiver"  android:exported="true">
    <intent-filter>
        <action android:name="android.intent.action.BOOT_COMPLETED"/>
        <action android:name="android.intent.action.INPUT_METHOD_CHANGED" />
    </intent-filter>
</receiver>

The intent filters specify the broadcast actions your receiver subscribes to.
Subclass BroadcastReceiver and implement onReceive(Context, Intent). The broadcast receiver in the following example logs and displays the
contents of the broadcast:

public class MyBroadcastReceiver extends BroadcastReceiver {
    private static final String TAG = "MyBroadcastReceiver";
    @Override
    public void onReceive(Context context, Intent intent) {
        StringBuilder sb = new StringBuilder();
        sb.append("Action: " + intent.getAction() + "\n");
        sb.append("URI: " + intent.toUri(Intent.URI_INTENT_SCHEME).toString() + "\n");
        String log = sb.toString();
        Log.d(TAG, log);
        Toast.makeText(context, log, Toast.LENGTH_LONG).show();
    }
}

Context-registered receivers : Refer Example

To register a receiver with a context, perform the following steps:

1) Create an instance of BroadcastReceiver.

BroadcastReceiver br = new MyBroadcastReceiver();

2) Create an IntentFilter and register the receiver by calling registerReceiver(BroadcastReceiver, IntentFilter):

IntentFilter filter = new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
intentFilter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);
this.registerReceiver(br, filter);

Note: To register for local broadcasts, call LocalBroadcastManager.registerReceiver(BroadcastReceiver, IntentFilter) instead.

To stop receiving broadcasts, call unregisterReceiver(android.content.BroadcastReceiver). Be sure to unregister the receiver when you no longer need it or the context is no longer valid.
***Be mindful of where you register and unregister the receiver, for example, if you register a receiver in onCreate(Bundle) using the activity's context, you should unregister it in onDestroy() to prevent leaking the receiver out of the activity context. If you register a receiver in onResume(), you should unregister it in onPause() to prevent registering it multiple times (If you don't want to receive broadcasts when paused, and this can cut down on unnecessary system overhead). Do not unregister in onSaveInstanceState(Bundle), because this isn't called if the user moves back in the history stack.

E.2.2) Sending broadcasts :


Android provides three ways for apps to send broadcast:

The sendOrderedBroadcast(Intent, String) method sends broadcasts to one receiver at a time. As each receiver executes in turn, it can propagate a result to the next receiver, or it can completely abort the broadcast so that it won't be passed to other receivers. The order receivers run in can be controlled with the android:priority attribute of the matching intent-filter; receivers with the same priority will be run in an arbitrary order.
The sendBroadcast(Intent) method sends broadcasts to all receivers in an undefined order. This is called a Normal Broadcast. This is more efficient, but means that receivers cannot read results from other receivers, propagate data received from the broadcast, or abort the broadcast.
The LocalBroadcastManager.sendBroadcast method sends broadcasts to receivers that are in the same app as the sender. If you don't need to send broadcasts across apps, use local broadcasts. The implementation is much more efficient (no interprocess communication needed) and you don't need to worry about any security issues related to other apps being able to receive or send your broadcasts.
The following code snippet demonstrates how to send a broadcast by creating an Intent and calling sendBroadcast(Intent).

Intent intent = new Intent();
intent.setAction("com.example.broadcast.MY_NOTIFICATION");
intent.putExtra("data","Notice me senpai!");
sendBroadcast(intent);


E.3) Restricting broadcasts with permissions :   (PERFORMANCE IMPROVEMENT)

Permissions allow you to restrict broadcasts to the set of apps that hold certain permissions.
You can enforce restrictions on either the sender or receiver of a broadcast.

Sending with permissions :

When you call sendBroadcast(Intent, String) or sendOrderedBroadcast(Intent, String, BroadcastReceiver, Handler, int, String, Bundle),
you can specify a permission parameter. Only receivers who have requested that permission with the tag in their manifest
(and subsequently been granted the permission if it is dangerous) can receive the broadcast. For example, the following
code sends a broadcast:

sendBroadcast(new Intent("com.example.NOTIFY"),
              Manifest.permission.SEND_SMS);
To receive the broadcast, the receiving app must request the permission as shown below:

<uses-permission android:name="android.permission.SEND_SMS"/>




E.4) Security considerations and best practices (SECURITY CONSIDERATION) :

Here are some security considerations and best practices for sending and receiving broadcasts:

1)If you don't need to send broadcasts to components outside of your app, then send and receive local broadcasts with
the LocalBroadcastManager which is available in the Support Library. The LocalBroadcastManager is much more efficient
(no interprocess communication needed) and allows you to avoid thinking about any security issues related to other apps
being able to receive or send your broadcasts. Local Broadcasts can be used as a general purpose pub/sub event bus in your
app without any overheads of system wide broadcasts.
2)If many apps have registered to receive the same broadcast in their manifest, it can cause the system to launch a lot of apps,
causing a substantial impact on both device performance and user experience. To avoid this, prefer using context registration
over manifest declaration. Sometimes, the Android system itself enforces the use of context-registered
receivers(registering inside activity on oncreate()). For example, the CONNECTIVITY_ACTION broadcast is delivered only to context-registered receivers.
3)Do not broadcast sensitive information using an implicit intent. The information can be read by any app that registers
to receive the broadcast. There are three ways to control who can receive your broadcasts:
a)You can specify a permission when sending a broadcast.
b)In Android 4.0 and higher, you can specify a package with setPackage(String) when sending a broadcast. The system restricts the broadcast to the set of apps that match the package.
c)You can send local broadcasts with LocalBroadcastManager.

4) When you register a receiver, any app can send potentially malicious broadcasts to your app's receiver.
There are three ways to limit the broadcasts that your app receives:
a) You can specify a permission when registering a broadcast receiver.
b) For manifest-declared receivers, you can set the android:exported attribute to "false" in the manifest. The
receiver does not receive broadcasts from sources outside of the app.
c) You can limit yourself to only local broadcasts with LocalBroadcastManager.


5)Because a receiver's onReceive(Context, Intent) method runs on the main thread, it should execute and return quickly.
If you need to perform long running work, be careful about spawning threads or starting background services because
the system can kill the entire process after onReceive() returns. For more information, see Effect on process state
To perform long running work, we recommend: Calling goAsync() in your receiver's onReceive() method and passing the BroadcastReceiver.PendingResult to a background thread. This keeps the broadcast active after returning from onReceive(). However, even with this approach the system expects you to finish with the broadcast very quickly (under 10 seconds). It does allow you to move work to another thread to avoid glitching the main thread.
Scheduling a job with the JobScheduler. For more information, see Intelligent Job Scheduling.
Do not start activities from broadcast receivers because the user experience is jarring; especially if there is more than
one receiver. Instead, consider displaying a notification.






^&*^&*^&**&^*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^^&*^&*^&*^&*^**^&*^&*^&*^&*^&*^&*&
^&*^&*^&**^*^&***^&*^&&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*





F.1) Volley :

Volley is an HTTP library that makes networking for Android apps easier and most importantly, faster.

F.2)Volley offers the following benefits:

..There is no need to create AsyncTask. It manages by itself.
..Automatic scheduling of network requests.
..Multiple concurrent network connections.
..Transparent disk and memory response caching with standard HTTP cache coherence.
..Support for request prioritization.
..Cancellation request API. You can cancel a single request, or you can set blocks or scopes of requests to cancel.
..Ease of customization, for example, for retry and backoff.
..Strong ordering that makes it easy to correctly populate your UI with data fetched asynchronously from the network.
..Debugging and tracing tools.


F.3)Volley is not suitable for large download or streaming operations, since Volley holds all responses in memory during parsing.
 For large download operations, consider using an alternative like DownloadManager.

...The download manager is a system service that handles long-running HTTP downloads. Clients may request that a URI be
downloaded to a particular destination file. The download manager will conduct the download in the background, taking care
of HTTP interactions and retrying downloads after failures or across connectivity changes and system reboots.

F.4) The core Volley library is developed on GitHub .


F.5) Sending a Simple Request

At a high level(interaction-level or front-level), you use Volley by creating a RequestQueue and passing it Request objects.
The RequestQueue manages worker threads for running the network operations, reading from and writing to the cache, and parsing
responses. Requests do the parsing of raw responses and Volley takes care of dispatching the parsed response back to the main
thread for delivery.

REfer below code:

final TextView mTextView = (TextView) findViewById(R.id.text);
...

// Instantiate the RequestQueue.
RequestQueue queue = Volley.newRequestQueue(this);
String url ="http://www.google.com";

// Request a string response from the provided URL.
StringRequest stringRequest = new StringRequest(Request.Method.GET, url,
            new Response.Listener<String>() {
    @Override
    public void onResponse(String response) {
        // Display the first 500 characters of the response string.
        mTextView.setText("Response is: "+ response.substring(0,500));
    }
}, new Response.ErrorListener() {
    @Override
    public void onErrorResponse(VolleyError error) {
        mTextView.setText("That didn't work!");
    }
});
// Add the request to the RequestQueue.
queue.add(stringRequest);


****Internal Working : Send a Request
Refer : https://developer.android.com/training/volley/simple.html#send

a) To send a request, you simply construct one and add it to the RequestQueue with add(), as shown above.
Once you add the request it moves through the pipeline, gets serviced, and has its raw response parsed and delivered.

b) When you call add(), Volley runs one cache processing thread and a pool of network dispatch threads. When you add a request to the queue, it is picked up by the cache thread and triaged: if the request can be serviced from cache, the cached response is parsed on the cache thread and the parsed response is delivered on the main thread. If the request cannot be serviced from cache, it is placed on the network queue. The first available network thread takes the request from the queue, performs the HTTP transaction, parses the response on the worker thread, writes the response to cache, and posts the parsed response back to the main thread for delivery.

"Basically volley maintain two things in the background i.e cache and queue by using working thread. When a request is added in a queue it maintains a cache w.r.t that request."

c) You can add a request from any thread, but responses are always delivered on the main thread.

F.6) Cancel a Request :

You can cancel volley request from onStop() method. As :
request.setTag("TAG");
requestQueue.cancelAll("TAG");



^&*^&*^&**&^*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^^&*^&*^&*^&*^**^&*^&*^&*^&*^&*^&*&
^&*^&*^&**^*^&***^&*^&&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*


G.1) AsyncTask :

Methods :

onPreExecute()
doInbackGround()
onPostExecute()



^&*^&*^&**&^*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^^&*^&*^&*^&*^**^&*^&*^&*^&*^&*^&*&
^&*^&*^&**^*^&***^&*^&&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*



H.1) Retrofit :


3 classes :

a) pojo class
b) interface which defines HTTP operation
c) Retrofit BUilder class


^&*^&*^&**&^*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^^&*^&*^&*^&*^**^&*^&*^&*^&*^&*^&*&
^&*^&*^&**^*^&***^&*^&&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*^&*



I.1) webRTC :

REfer : https://tech.appear.in/2015/05/25/Introduction-to-WebRTC-on-Android/

Def : WebRTC ("Web Real-Time Communication") is a collection of communications protocols and application programming interfaces
that enable real-time communication over peer-to-peer connections. This allows web browsers to not only request resources from
backend servers, but also real-time information from browsers of other users.

a) With Web Real-Time Communication (WebRTC).
b) Provide peer connectivity between two browsers. (or end to end aopplication)
c)WebRTC is a powerful tool that can be used to infuse Real-Time Communications (RTC) capabilities into browsers and mobile applications.




J.1) Media Projection Manager :

Record Screen Capture


******************************************************************************************


K.1) Sqlite :

refer: https://thebhwgroup.com/blog/how-android-sqlite-onupgrade

1) extend SQLiteOpenHelper class
- onCreate - we create table
  onCreate will execute at the first time when app is insalled. Otherwise onUpgrade will execute if database already created.

- onUpgrade - onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) : We will check for SQlite Vesioning.

2) make use of constructor of SQliteOpenHelper

public MySQLiteHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }




J.1)  Volley : Googlw recommended networking library for android.

Adv : Faster, Smooth, cache management (LRU cache), request priority management, byitself create the background thread.

3 things :
A)--->
1) String Request
2) JsonObject Request
3) JsonArray Request
4) Image Request

b)--->
The methods we override for above request :
onResponseListener
onErrorListener

To maintain request at application level : addToRequestQueue

c)--->Methods :

getHeaders()

getCache() :
      int maxMemory = (int)Runtime.getRuntime().maxMemory()/1024;
      int cacheMemory = maxMemory/8;
      Cache cache = new DiskBasedCache(context.getCacheDir(),cacheMemory);

D) parseNetworkResponse() method will return perticular response.



K.1) Android Handler :

1)To communicate between UI thread and background thread we use handler.
2)By default w.r.t each handler there is a looper.