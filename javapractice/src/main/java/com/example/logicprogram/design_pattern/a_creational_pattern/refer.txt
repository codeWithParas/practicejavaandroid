
About: : https://en.wikipedia.org/wiki/Abstract_factory_pattern

In software engineering, creational design patterns are design patterns that deal with object
creation mechanisms, trying to create objects in a manner suitable to the situation. The basic
form of object creation could result in design problems or in added complexity to the design.
Creational design patterns solve this problem by somehow controlling this object creation.

Creational design patterns are composed of two dominant ideas. One is encapsulating knowledge
about which concrete classes the system uses. Another is hiding how instances of these concrete
classes are created and combined.[1]

Creational design patterns are further categorized into Object-creational patterns and
Class-creational patterns, where Object-creational patterns deal with Object creation and
Class-creational patterns deal with Class-instantiation. In greater details, Object-creational
patterns defer part of its object creation to another object, while Class-creational patterns
defer its object creation to subclasses

-> Five well-known design patterns that are parts of creational patterns are the

.Abstract factory pattern, which provides an interface for creating related or dependent objects without specifying the objects' concrete classes.[3]
.Builder pattern, which separates the construction of a complex object from its representation so that the same construction process can create different representations.
.Factory method pattern, which allows a class to defer instantiation to subclasses.[4]
.Prototype pattern, which specifies the kind of object to create using a prototypical instance, and creates new objects by cloning this prototype.
.Singleton pattern, which ensures that a class only has one instance, and provides a global point of access to it.[5]


Overview :->

1) The Abstract Factory design pattern solves problems like:

.How can an application be independent of how its objects are created?
.How can a class be independent of how the objects it requires are created?
.How can families of related or dependent objects be created?


2) ****Problem : Creating objects directly within the class that requires the objects is inflexible
because it commits the class to particular objects and makes it impossible to change the
instantiation later independently from (without having to change) the class. It stops the
class from being reusable if other objects are required, and it makes the class hard to test
because real objects can't be replaced with mock objects.

3) The Abstract Factory design pattern describes how to solve such problems:

.Encapsulate object creation in a separate (factory) object. That is, define an
interface (AbstractFactory) for creating objects, and implement the interface.
.A class delegates object creation to a factory object instead of creating objects directly.

4) This makes a class independent of how its objects are created (which concrete classes are
instantiated). A class can be configured with a factory object, which it uses to create objects,
and even more, the factory object can be exchanged at run-time. Refer
